var crypto = require('crypto');
var fs = require('fs');
var request = require('request');
var stream = require('stream');
var Readable = stream.Readable;

module.exports = Puush;

/**
 * Puush API handler
 * @constructor
 * @param {String} apiKey API key, optional
 */
function Puush(apiKey) {
  // TODO: handle overloaded parameters (email, password/apikey)

  this.API_KEY = null || apiKey;
};

/**
 * Authenticate user
 * @param  {String}   email    account email address
 * @param  {String}   password account password
 * @param  {Puush.authCallback} [callback] response handler callback
 */
Puush.prototype.auth = function(email, password, callback) {
  var self = this;
  var formFields = {
    e: email,
    p: password
  };

  this._innerRequest('auth', formFields, function(err, response) {
    var authResponse = Puush.parseAuthResponse(response);

    if (authResponse && authResponse.apiKey)
      self.API_KEY = authResponse.apiKey;

    callback(err, authResponse, response);
  });
};

/**
 * Authenticate user using API key
 * @param  {String}   email    account email address
 * @param  {String}   apikey   account API key
 * @param  {Puush.authCallback} [callback] response handler callback
 */
Puush.prototype.auth_key = function(email, apikey, callback) {
  var self = this;
  var formFields = {
    e: email,
    k: apikey
  };

  this._innerRequest('auth', formFields, function(err, response) {
    var authResponse = Puush.parseAuthResponse(response);

    if (authResponse && authResponse.apiKey)
      self.API_KEY = authResponse.apiKey;

    callback(err, authResponse, response);
  });
};

/**
 * Upload file
 * @param  {String}   file     file to upload
 * @param  {Puush.upCallback} [callback] response handler callback
 */
Puush.prototype.up = function(filename, file, callback) {
  var self = this;

  var md5sum = crypto.createHash('md5');
  var fstream = new Readable();


  fstream.on('data', function(data) {
    md5sum.update(data);
  });

  fstream.on('end', function() {
    var fstream = new Readable();
    var formFields = {
      k: self.API_KEY,
      c: md5sum.digest('hex').toLowerCase(),
      f: [fstream, {filename: filename, knownLength: file.length, contentType: 'application/octet-stream'}],
      z: 'poop'
    };
    self._innerRequest('up', formFields, function(err, response) {
      callback(err, Puush.parseUpResponse(response), response);
    });
    fstream.push(file, 'binary');
    fstream.push(null);
  });

  fstream.push(file, 'binary');
  fstream.push(null);
};

/**
 * List of previously uploaded files. Limited to 10 files on server side.
 * @param  {Function} callback response callback (err, {@link histResponse})
 * @return {Puush.histCallback} [callback] response handler callback
 */
Puush.prototype.hist = function(callback) {
  this._innerRequest('hist', {k: this.API_KEY}, function(err, response) {
    callback(err, Puush.parseHistResponse(response), response);
  });
};

/**
 * Delete uploaded file.
 * @param  {Number}   fileID   uploaded file id
 * @param  {Puush.histCallback} [callback] response handler callback
 */
Puush.prototype.del = function(fileID, callback) {
  this._innerRequest('del', {k: this.API_KEY, i: fileID}, function(err, response) {
    callback(err, Puush.parseDelResponse(response), response);
  });
};

/**
 * Base URL of puush API
 * @private
 * @constant
 * @type {String}
 */
Puush.prototype._API_URL = "http://puush.me/api/"; // NOTE: use __defineGetter__ instead?

/**
 * General API request method
 * @private
 * @param {String} api name of the API to call
 * @param {Object} formFields object containing the fields of the form
 * @param {Function} [callback] response handler callback
 */
Puush.prototype._innerRequest = function(api, formFields, callback) {
  if (formFields.k && formFields.k === null) throw new Error("Missing API key!");

  var post = request.post(this._API_URL + api, function optionalCallback(err, httpResponse, body) {
    if (callback && typeof callback === "function") callback(err, body);
  });

  var form = post.form();

  if (this.API_KEY)
    form.append('k', this.API_KEY);

  for (var property in formFields) {
    if (property === 'f') {
      form.append(property, formFields[property][0], formFields[property][1]);
    } else {
      form.append(property, formFields[property]);
    }
  }
};

/**
 * @param  {String} response response from API
 * @return {Puush.authResponse}
 */
Puush.parseAuthResponse = function(response) {
  var authPattern = new RegExp("^(\\d+),([0-9A-F,]+),([^,]*),(\\d+)$");
  var match = authPattern.exec(response);

  if (match) {
    return {
      premium: match[1], // parseInt?
      apiKey: match[2],
      expire: match[3],
      sizeSum: match[4] // parseInt?
    };
  }

  return response;
};

/**
 * @param  {String} response response from API
 * @returns {Puush.upResponse}
 */
Puush.parseUpResponse = function(response) {
  var upPattern = new RegExp("^0,([^,]+),(\\d+),(\\d+)$", "gm");
  var match = upPattern.exec(response);

  if (match) {
    return {
      url: match[1],
      id: parseInt(match[2])
      // size: match[3] // always 0, ignore it
    };
  }

  return response;
};

/**
 * @param  {String} response response from API
 * @returns {Puush.histResponse}
 */
Puush.parseHistResponse = function(response) {
  var fileList = [];
  var histPattern = new RegExp("^(\\d+),([^,]+),([^,]+),([^,]+),(\\d+),(\\d+)$", "gm");
  var match = histPattern.exec(response);

  if (match) {
    while (match) {
      fileList.push({
        id: parseInt(match[1]),
        datetime: new Date(match[2]),
        url: match[3],
        filename: match[4],
        views: parseInt(match[5])
      });

      match = histPattern.exec(response);
    }

    return fileList;
  }

  return response;
};

/**
 * @param  {String} response response from API
 * @returns {Puush.histResponse}
 */
Puush.parseDelResponse = function(response) {
  return this.parseHistResponse(response);
};


/**
 * @callback Puush.authCallback
 * @param {Object} error info about the error
 * @param {Puush.authResponse} response info about the associated account
 */

/**
 * @callback Puush.histCallback
 * @param {Object} error info about the error
 * @param {Array.<Puush.histResponse>} response array of uploaded files info
 */

/**
 * @callback Puush.upCallback
 * @param {Object} error info about the error
 * @param {Puush.upResponse} response info about the uploaded file
 */

/**
 * @typedef {Object} Puush.authResponse
 * @property {Number} premium account is premium?
 * @property {String} apiKey API key of the user
 * @property {String} expire premium expiration date?
 * @property {Number} sizeSum sum of file sizes?
 */

/**
 * @typedef {Object} Puush.histResponse
 * @property {Number} id uploaded file id
 * @property {Date} datetime upload datetime
 * @property {String} url download url
 * @property {String} filename name of the uploaded file
 * @property {Number} views number of views
 */

/**
 * @typedef {Object} Puush.upResponse
 * @property {Number} id uploaded file id
 * @property {String} url download url
 */
